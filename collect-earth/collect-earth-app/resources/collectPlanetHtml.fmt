
<!DOCTYPE html>
<html>
<head>
	
	<title>Planet Labs - Collect Earth Integration</title>

	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	
 	<link rel="stylesheet" href="http://ghusse.github.io/jQRangeSlider/stable/css/iThing.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js" integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==" crossorigin=""></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
	<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/themes/smoothness/jquery-ui.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRangeSliderMouseTouch.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRangeSliderDraggable.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRangeSliderBar.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRangeSliderHandle.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRangeSliderLabel.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRangeSlider.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQDateRangeSliderHandle.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQDateRangeSlider.js"></script>
	<script src="http://ghusse.github.io/jQRangeSlider/stable/jQRuler.js"></script>
	<style>
		html, body {
			height: 100%;
			margin: 0;
		}
		#map {
			width: 100%;
			height: 100%;
		}
	</style>

	
</head>
<body>
<div id='map' style="z-index: 1;"></select></></div>
<div id="slider" style="position:absolute; bottom:0px; left:15px; right:15px; width:95%; height:100px; z-index: 100"></div>

<script>


	function setLayerURL( fromDate, toDate, geometry){
				  $.post( 
				    	"${urlPlanetEndpointPrefix}planet", 
						{ 
							start: $.datepicker.formatDate('yy-mm-dd', fromDate ), 
							end : $.datepicker.formatDate('yy-mm-dd', toDate ),
							itemTypes : ["PSScene3Band","PSScene4Band","REOrthoTile"], // , "REOrthoTile" RapidEye not working 
							geometry : JSON.stringify( geometry ) }
					).done(
						function( data ) {
						  	if( data === ""){
						  		alert("No imagery for the dates selected");
						  	}
							setLayer( data );
					 	}
					 ).fail(function(data, textStatus, xhr) {
		                 //This shows status code eg. 403
		                 console.log("error", data.status);
		                 if( data.responseText.includes("401") ){
		                 	alert("Planet Authentication Error: Check that the Planet API Key used is correct in the Collect Earth properties dialog");
		                 }else{
		                 	alert("Error connecting to Planet servers " + data.responseText );
		                 }
		            });
	}
	
	var defaultEndDate = new Date();
	var defaultStartDate = new Date();
	defaultStartDate.setDate( defaultStartDate.getDate() - 120 );  

     $("#slider").dateRangeSlider({
		valueLabels:"change",
		delayOut: 4000,
		range:{
		    min: {days: 5},
		    max: {days: 240}
		},
		bounds: {min: new Date(2009, 01, 01), max: defaultEndDate},
		defaultValues: {min: defaultStartDate, max: defaultEndDate},
		})
		
		$("#slider").bind("userValuesChanged", function(e, data){
			var fromDate = data.values.min;
			var toDate = data.values.max;
			setLayerURL(fromDate, toDate, boundaries );
		});
</script>
<script type="text/javascript">

	$(document).ready(function () {
	  	
		setLayerURL( defaultStartDate, defaultEndDate, boundaries);
	  
	});

	var map = L.map('map');
	var lastLayer;
	var setLayer = function( url ){
		if( lastLayer ){
			map.removeLayer( lastLayer);		
		}
		lastLayer = L.tileLayer(url+'?api_key=${planetMapsKey}', {
			tms: false
		}).addTo(map);
	}
	
	var boundaries = [ 
	// create a red polyline from an array of LatLng points
			<#list placemark.multiShape as shp>
             [
            	<#list shp as coord>
				[${coord.longitude},${coord.latitude}],
				</#list>
			]
			</#list>
			];
	var latlngs = [ 
	// create a red polyline from an array of LatLng points
			<#list placemark.multiShape as shp>
             [
            	<#list shp as coord>
				[${coord.latitude},${coord.longitude}],
				</#list>
			],
			</#list>
           <#list placemark.points as square>
 				[ 
			     <#list square.shape as squareCorners>
			           [${squareCorners.latitude},${squareCorners.longitude}],
			     </#list>
		     	],
		     	<#if square.points?? >
					<#list square.points as innerpoint>
					[
						<#list innerpoint.shape as squareCorners>
					  [${squareCorners.latitude},${squareCorners.longitude}],
						</#list>
					],				 
					</#list>
				</#if>		     	
		    </#list>
	];
	

	var polyline = L.polyline(latlngs, {color: 'yellow'}).addTo(map);
	// zoom the map to the polyline
	map.fitBounds(polyline.getBounds(), { padding : [35,35] } );

</script>



</body>
</html>
